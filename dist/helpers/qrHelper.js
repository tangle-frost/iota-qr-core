Object.defineProperty(exports, "__esModule", { value: true });
const errorCorrectLevel_1 = require("../models/errorCorrectLevel");
const maskPattern_1 = require("../models/maskPattern");
const qrDataMode_1 = require("../models/qrDataMode");
const mathHelper_1 = require("./mathHelper");
const polynomial_1 = require("./polynomial");
/**
 * Helper methods for QR generation.
 * Based on https://github.com/kazuhikoarase/qrcode-generator/
 */
class QRHelper {
    /**
     * Get the pattern position for the given type number.
     * @param typeNumber The type number to get the pattern for.
     * @returns The pattern for the type number.
     */
    static getPatternPosition(typeNumber) {
        return QRHelper.PATTERN_POSITION_TABLE[typeNumber - 1];
    }
    /**
     * Get the max length of the data.
     * @param typeNumber The type number to get the max length for.
     * @param mode The data mode to get data max length for.
     * @param errorCorrectLevel The error correction to get the max length for.
     * @returns The max length.
     */
    static getMaxLength(typeNumber, mode, errorCorrectLevel) {
        const t = typeNumber - 1;
        let e = 0;
        let m = 0;
        switch (errorCorrectLevel) {
            case errorCorrectLevel_1.ErrorCorrectLevel.L:
                e = 0;
                break;
            case errorCorrectLevel_1.ErrorCorrectLevel.M:
                e = 1;
                break;
            case errorCorrectLevel_1.ErrorCorrectLevel.Q:
                e = 2;
                break;
            case errorCorrectLevel_1.ErrorCorrectLevel.H:
                e = 3;
                break;
            default:
                throw new Error(`Unknown error correction level ${errorCorrectLevel}`);
        }
        switch (mode) {
            case qrDataMode_1.QRDataMode.number:
                m = 0;
                break;
            case qrDataMode_1.QRDataMode.alphaNumeric:
                m = 1;
                break;
            case qrDataMode_1.QRDataMode.byte8:
                m = 2;
                break;
            default:
                throw new Error(`Unknown data mode ${mode}`);
        }
        return QRHelper.MAX_LENGTH[t][e][m];
    }
    /**
     * Get the error correction polynomial for the error correcto length.
     * @param errorCorrectLength The error correction length to get the polynomial for.
     * @returns The polynomial for the error correction length.
     */
    static getErrorCorrectPolynomial(errorCorrectLength) {
        let a = new polynomial_1.Polynomial([1]);
        for (let i = 0; i < errorCorrectLength; i++) {
            a = a.multiply(new polynomial_1.Polynomial([1, mathHelper_1.MathHelper.gexp(i)]));
        }
        return a;
    }
    /**
     * Get the mask method for the given pattern.
     * @param maskPattern The pattern to get the mask for.
     * @returns The mask method for the pattern.
     */
    static getMaskMethod(maskPattern) {
        switch (maskPattern) {
            case maskPattern_1.MaskPattern.PATTERN000:
                return (i, j) => (i + j) % 2 === 0;
            case maskPattern_1.MaskPattern.PATTERN001:
                return (i, j) => i % 2 === 0;
            case maskPattern_1.MaskPattern.PATTERN010:
                return (i, j) => j % 3 === 0;
            case maskPattern_1.MaskPattern.PATTERN011:
                return (i, j) => (i + j) % 3 === 0;
            case maskPattern_1.MaskPattern.PATTERN100:
                return (i, j) => (~~(i / 2) + ~~(j / 3)) % 2 === 0;
            case maskPattern_1.MaskPattern.PATTERN101:
                return (i, j) => (i * j) % 2 + (i * j) % 3 === 0;
            case maskPattern_1.MaskPattern.PATTERN110:
                return (i, j) => ((i * j) % 2 + (i * j) % 3) % 2 === 0;
            case maskPattern_1.MaskPattern.PATTERN111:
                return (i, j) => ((i * j) % 3 + (i + j) % 2) % 2 === 0;
            default:
                throw new Error(`Invalid mask ${maskPattern}`);
        }
    }
    /**
     * Get the BCH type info.
     * @param data The data to get the BCH type info for.
     * @returns The type info.
     */
    static getBCHTypeInfo(data) {
        let d = data << 10;
        while (QRHelper.getBCHDigit(d) - QRHelper.getBCHDigit(QRHelper.G15) >= 0) {
            d ^= (QRHelper.G15 << (QRHelper.getBCHDigit(d) -
                QRHelper.getBCHDigit(QRHelper.G15)));
        }
        return ((data << 10) | d) ^ QRHelper.G15_MASK;
    }
    /**
     * Get the BCH type number.
     * @param data The data to get the BCH type number for.
     * @returns The type number.
     */
    static getBCHTypeNumber(data) {
        let d = data << 12;
        while (QRHelper.getBCHDigit(d) - QRHelper.getBCHDigit(QRHelper.G18) >= 0) {
            d ^= (QRHelper.G18 << (QRHelper.getBCHDigit(d) -
                QRHelper.getBCHDigit(QRHelper.G18)));
        }
        return (data << 12) | d;
    }
    /* @internal */
    static getBCHDigit(data) {
        let localData = data;
        let digit = 0;
        while (localData !== 0) {
            digit++;
            localData >>>= 1;
        }
        return digit;
    }
}
/* @internal */
QRHelper.PATTERN_POSITION_TABLE = [
    [],
    [6, 18],
    [6, 22],
    [6, 26],
    [6, 30],
    [6, 34],
    [6, 22, 38],
    [6, 24, 42],
    [6, 26, 46],
    [6, 28, 50],
    [6, 30, 54],
    [6, 32, 58],
    [6, 34, 62],
    [6, 26, 46, 66],
    [6, 26, 48, 70],
    [6, 26, 50, 74],
    [6, 30, 54, 78],
    [6, 30, 56, 82],
    [6, 30, 58, 86],
    [6, 34, 62, 90],
    [6, 28, 50, 72, 94],
    [6, 26, 50, 74, 98],
    [6, 30, 54, 78, 102],
    [6, 28, 54, 80, 106],
    [6, 32, 58, 84, 110],
    [6, 30, 58, 86, 114],
    [6, 34, 62, 90, 118],
    [6, 26, 50, 74, 98, 122],
    [6, 30, 54, 78, 102, 126],
    [6, 26, 52, 78, 104, 130],
    [6, 30, 56, 82, 108, 134],
    [6, 34, 60, 86, 112, 138],
    [6, 30, 58, 86, 114, 142],
    [6, 34, 62, 90, 118, 146],
    [6, 30, 54, 78, 102, 126, 150],
    [6, 24, 50, 76, 102, 128, 154],
    [6, 28, 54, 80, 106, 132, 158],
    [6, 32, 58, 84, 110, 136, 162],
    [6, 26, 54, 82, 110, 138, 166],
    [6, 30, 58, 86, 114, 142, 170]
];
/* @internal */
QRHelper.MAX_LENGTH = [
    [[41, 25, 17, 10], [34, 20, 14, 8], [27, 16, 11, 7], [17, 10, 7, 4]],
    [[77, 47, 32, 20], [63, 38, 26, 16], [48, 29, 20, 12], [34, 20, 14, 8]],
    [[127, 77, 53, 32], [101, 61, 42, 26], [77, 47, 32, 20], [58, 35, 24, 15]],
    [[187, 114, 78, 48], [149, 90, 62, 38], [111, 67, 46, 28], [82, 50, 34, 21]],
    [[255, 154, 106, 65], [202, 122, 84, 52], [144, 87, 60, 37], [106, 64, 44, 27]],
    [[322, 195, 134, 82], [255, 154, 106, 65], [178, 108, 74, 45], [139, 84, 58, 36]],
    [[370, 224, 154, 95], [293, 178, 122, 75], [207, 125, 86, 53], [154, 93, 64, 39]],
    [[461, 279, 192, 118], [365, 221, 152, 93], [259, 157, 108, 66], [202, 122, 84, 52]],
    [[552, 335, 230, 141], [432, 262, 180, 111], [312, 189, 130, 80], [235, 143, 98, 60]],
    [[652, 395, 271, 167], [513, 311, 213, 131], [364, 221, 151, 93], [288, 174, 119, 74]]
];
/* @internal */
QRHelper.G15 = (1 << 10) | (1 << 8) | (1 << 5)
    | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
/* @internal */
QRHelper.G18 = (1 << 12) | (1 << 11) | (1 << 10)
    | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
/* @internal */
QRHelper.G15_MASK = (1 << 14) | (1 << 12) | (1 << 10)
    | (1 << 4) | (1 << 1);
exports.QRHelper = QRHelper;
//# sourceMappingURL=data:application/json;base64,